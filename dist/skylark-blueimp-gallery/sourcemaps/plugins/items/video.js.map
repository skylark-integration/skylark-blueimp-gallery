{"version":3,"sources":["plugins/items/video.js"],"names":["define","langx","noder","eventer","$","Gallery","VideoItemFactory","ItemFactoryBase","inherit","klassName","options","videoContentClass","videoLoadingClass","videoPlayingClass","videoPosterProperty","videoSourcesProperty","initOptions","this","overrided","mixin","prototype","handleSlide","index","call","playingVideo","pause","render","obj","callback","videoInterface","posterImage","source","playMediaControl","isLoading","that","videoContainerNode","createElement","videoContainer","errorArgs","type","target","video","document","url","getItemProperty","urlProperty","typeProperty","title","titleProperty","altText","altTextProperty","posterUrl","sources","addClass","canPlayType","src","length","shift","poster","toggleClass","draggable","alt","appendChild","setAttribute","href","controls","on","setTimeout","seeking","removeClass","gallery","trigger","item","interval","play","window","clearTimeout","timeout","event","stop","element","pluginInfo","name","mimeType","ctor","installPlugin"],"mappings":"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","file":"../../../plugins/items/video.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  '../../Gallery',\r\n], function (langx, noder, eventer, $, Gallery) {\r\n\r\n  'use strict'\r\n\r\n  var VideoItemFactory = Gallery.ItemFactoryBase.inherit({\r\n    klassName: \"VideoItemFactory\",\r\n\r\n    options: {\r\n      // The class for video content elements:\r\n      videoContentClass: 'video-content',\r\n      // The class for video when it is loading:\r\n      videoLoadingClass: 'video-loading',\r\n      // The class for video when it is playing:\r\n      videoPlayingClass: 'video-playing',\r\n      // The list object property (or data attribute) for the video poster URL:\r\n      videoPosterProperty: 'poster',\r\n      // The list object property (or data attribute) for the video sources array:\r\n      videoSourcesProperty: 'sources'\r\n    },\r\n\r\n    initOptions: function (options) {\r\n      this.overrided();\r\n      this.options = langx.mixin(this.options, VideoItemFactory.prototype.options, options);\r\n    },\r\n\r\n    handleSlide: function (index) {\r\n      handleSlide.call(this, index)\r\n      if (this.playingVideo) {\r\n        this.playingVideo.pause()\r\n      }\r\n    },\r\n\r\n    render: function (obj, callback, videoInterface) {\r\n      var that = this\r\n      var options = this.options\r\n      var videoContainerNode = noder.createElement(\"div\")\r\n      var videoContainer = $(videoContainerNode)\r\n      var errorArgs = [{\r\n        type: 'error',\r\n        target: videoContainerNode\r\n      }]\r\n      var video = videoInterface || document.createElement('video')\r\n      var url = this.getItemProperty(obj, options.urlProperty)\r\n      var type = this.getItemProperty(obj, options.typeProperty)\r\n      var title = this.getItemProperty(obj, options.titleProperty)\r\n      var altText =\r\n        this.getItemProperty(obj, this.options.altTextProperty) || title\r\n      var posterUrl = this.getItemProperty(obj, options.videoPosterProperty)\r\n      var posterImage\r\n      var sources = this.getItemProperty(obj, options.videoSourcesProperty)\r\n      var source\r\n      var playMediaControl\r\n      var isLoading\r\n      var hasControls\r\n      videoContainer.addClass(options.videoContentClass)\r\n      if (title) {\r\n        videoContainerNode.title = title\r\n      }\r\n      if (video.canPlayType) {\r\n        if (url && type && video.canPlayType(type)) {\r\n          video.src = url\r\n        } else if (sources) {\r\n          while (sources.length) {\r\n            source = sources.shift()\r\n            url = this.getItemProperty(source, options.urlProperty)\r\n            type = this.getItemProperty(source, options.typeProperty)\r\n            if (url && type && video.canPlayType(type)) {\r\n              video.src = url\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (posterUrl) {\r\n        video.poster = posterUrl\r\n        posterImage = noder.createElement(\"img\")\r\n        $(posterImage).addClass(options.toggleClass)\r\n        posterImage.src = posterUrl\r\n        posterImage.draggable = false\r\n        posterImage.alt = altText\r\n        videoContainerNode.appendChild(posterImage)\r\n      }\r\n      playMediaControl = document.createElement('a')\r\n      playMediaControl.setAttribute('target', '_blank')\r\n      if (!videoInterface) {\r\n        playMediaControl.setAttribute('download', title)\r\n      }\r\n      playMediaControl.href = url\r\n      if (video.src) {\r\n        video.controls = true;\r\n        (videoInterface || $(video))\r\n        .on('error', function () {\r\n            that.setTimeout(callback, errorArgs)\r\n          })\r\n          .on('pause', function () {\r\n            if (video.seeking) return\r\n            isLoading = false\r\n            videoContainer\r\n              .removeClass(that.options.videoLoadingClass)\r\n              .removeClass(that.options.videoPlayingClass)\r\n            that.gallery.trigger(\"item.pause\", {\r\n              item: that\r\n            });\r\n            delete that.playingVideo\r\n            if (that.interval) {\r\n              that.play()\r\n            }\r\n          })\r\n          .on('playing', function () {\r\n            isLoading = false\r\n            videoContainer\r\n              .removeClass(that.options.videoLoadingClass)\r\n              .addClass(that.options.videoPlayingClass);\r\n\r\n            that.gallery.trigger(\"item.running\", {\r\n              item: that\r\n            });\r\n          })\r\n          .on('play', function () {\r\n            window.clearTimeout(that.timeout)\r\n            isLoading = true\r\n            videoContainer.addClass(that.options.videoLoadingClass)\r\n            that.playingVideo = video\r\n\r\n            that.gallery.trigger(\"item.run\", {\r\n              item: that\r\n            });\r\n          })\r\n        $(playMediaControl).on('click', function (event) {\r\n          eventer.stop(event)\r\n          if (isLoading) {\r\n            video.pause()\r\n          } else {\r\n            video.play()\r\n          }\r\n        })\r\n        videoContainerNode.appendChild(\r\n          (videoInterface && videoInterface.element) || video\r\n        )\r\n      }\r\n      videoContainerNode.appendChild(playMediaControl)\r\n      this.setTimeout(callback, [{\r\n        type: 'load',\r\n        target: videoContainerNode\r\n      }])\r\n      return videoContainerNode\r\n\r\n    }\r\n\r\n\r\n  });\r\n\r\n\r\n  var pluginInfo = {\r\n    name: \"video\",\r\n    mimeType: \"video\",\r\n    ctor: VideoItemFactory\r\n  };\r\n\r\n  Gallery.installPlugin(\"items\", pluginInfo);\r\n\r\n  return pluginInfo;\r\n\r\n});"]}